JAVA:
-> It is Object Oriented Programming Language
->It is introduction by Sun MicroSystems in 1996
->Java is an improved language from c and c++
->It is also known as web application language
 
Features of web application language:
1.cross platform/os independency
2.cross device/device independency
3.cross network/Network independency

History of Java:
1990: Sun micro systm was started
          b programmers started and led by James Gosling
1991:They started one project called "Green Project".
         That project is to develop programming language
         This Language is for sake of electronic device
1992: Oak Language introduction
1993: In this year they are promoting totally Oak application.
1994: Oak been Converted for Web application
1995: HOT Java Browser was introduced
1996: Java Language was introduced 
          JDK->Java Development Kit
2007: onwords Oracle Corporation
---------------------------------------------------------------
Content of java:
1.core java/java language(coding skills)
2.Advanced java/web technologies
 JSP,JDBC,Servlet  (HTML,CSS,JS....),SQL
   
	 3-tier architecture
 front end(HTML) -> [Servelet/jsp]---->[database]
                     web server    jdbc       db
3.Java Full Stack
core java
adv java
MVC(Spring boot) framework

4.Android applications
 (Android Studio)
--------------------------------
Contents:
1.I/O statements
2.Data types & Variables
3.Operators
4.Control Statements[if,loop]
5.Logic Oriented Programming
6.String,Math,Date 
7.Exception Handling
8.I/O Stream
9.OOP
10.Multithreading
11.Collection & Generics.
---------------------------------------
Core java:
Features:
->Java is a Case Sensitive Language (Lower Case)
->It is high level language
->Java is OOP language
->Java is compiled & interpreter language
->Byte code convertion
->Native code Generation
->Support of external lanuages
     java,Html
     java,xml
     java,sql
->It's a Secured & robust programming language
->It's a Multithreaded programming language
->Types of user interfaces
      ->GUI (Graphical User Interface)
      ->CUI (Character User Interface)


Implementation Requirements:
Hardware Req:
p2 processor onwards
4GB RAM onwards
540 GB harddisk onwards

Software req:
any os
JDK 11 (Oracle Corporation)
after installation of jdk path is to be set

other's s/w's:
edit plus
notepad ++
eclipse
netbeans

how to develop in online?
search : GDB compiler for java

how to check java version.
java --version

Program Development:
1.write code in
    filename.java using notepad editor
2.compile with
     javac complier
     javac filename.java
3.run with
     java interpreter.
     java filename


jdk architecture:
diagram

a.java
	javac
a.class

byte code
	java
java native code
	jre
cpu
-------------------
java program syntax:
class classname
{
public static void main(String... args){
statement;
}
}
save: ctrl+s
compile: javac a.java
run : java a

classname and filename should be same

Hierarachy of java package:
java-package 
 subpackage:
   lang
   io
   util
   text
   math
   date
   applet
   awt
   sql
   net
Note:
java.lang is default imported package
------------------
I/O Statement:
output handling:
the process of writing/printing some text console.

Method:
java.lang.System.out.print('hello');
System.out.println("abcd");

println includes new line

Wap Hello World
notepad first.java

class first{
public static void main(String... args){
System.out.println("hello world");
}
}

javac first.java
java first
-----------------------
wap to print world wide web

import static java.lang.System.*;
class p{
public static void main(String... nk){
out.print("world");
out.print("wide");
out.print("web");
}
}
--------------------------------
token means keywords:

Java tokens are keywords :
abstract
assert
boolean
break
byte
case
catch
char
class
continue
default
do
double
else
enum
extends
final
finally
float
for
if
implements
import
instanceof
int
interface
long
native
new
null
false
true
package
private
protected
public
return
short
static
strictfp
super
switch
synchronized
this
throw
throws
transient
try
void
voltile
while
const
goto
-----------------------
Escape charaters & Escape Machanism:
Escape charaters:
\n ->new line
\t ->tabspace or new horizontal tab
\b ->backspace

Escape Machanism:

regular    | escap
\b 		\\b
\n		\\n
\t		\\t
"		\"
'		\'
\		\\

package basic;
/*wap to print
 "love"
    'you'
        \mom\
*/
public class b {
    public static void main(String[] args) {
 System.err.println(" \"love\"  \n\t \'you\' \n\t\t \\mom\\");       
    }
    
}
----------------------------------------------
package basic;
/*wap to print
 world 
        wide 
                web
*/
public class b {
    public static void main(String[] args) {
 System.err.println(" world  \n\t wide \n\t\t\b\b\b\b web");       
    }
    
}
-----------------------------------------
Data Types:
data types are have two types:
1.primitive
2.non primitive
---------------------
Non-Primitive:
Non-primitive datatypes are collection of object type
ex:
String name="Nitish Kumar";
String address=""

java.lang.String
->It holds multiple values upto 2GB.
-------------------------
Primitive:
they are types holds one value

primitive: they are 2 types
1.numeric
2.non-numeric

Numeric:
This can be read -ve,+ve,int,float.

Datatype	purpose		range	no.of bytes
byte	   it hold very small	-128 to  1byte
		int value	+127
short 	   medium int value     +_32k     2byte
int		huge int vale    +_ 214k  4byte
long	very huge val		processor  8byte
float       floating val	7decimals   4byte
double       floating no's       15decimals  8byte

note: 
java default integer type is int
java default floating type is double

-----------------------------------------
non -numeric:
char:
it holds 1 char
storage capacity is 1 byte

boolean:
it holds either true or false
storage capacity is 1 bit.
-----------------------------------
class a{
public static void main(String args[]){
byte b=90;
short s=32000;
int i=123456789;
long l=123456789;  //long constant
long l1=1234567890123456L; //long constant
float f=12;  //float constant
float f1=14.4f; //float constant
double d=45.45;
char c='A';
String str="word or para...";

System.out.println("byte : "+b+"\nshort : "+s+"\nint : "+i+"\nlong : "+l+"\nlong1 : "+l1+"\nfloat : "+f+"\nfloat : "+f1+"\ndouble : "+d+"\nchar : "+c+"\nstring : "+str);
}
}
--------------------------------------
variable:
a user name temporary stroage location of RAM.
Feature:
it should be declared first 
it never be a reserved word
it can contain alphabets,numbers,special characters(_,$)
first character never be a digit.

variable initialization & declaration:
int x;
int x,y;
String name="nitish"
float op1=10.3f;

valid :
a
a1
a_b
a_

invalid:
1a
a b
^a
$a
-----------------
class a{
public static void main(String args[]){
int a=1;
int a_b=2;
int a_=3;
int _a=4;
int a1=5;
int a$=6;
System.out.println(a+" "+a_b+" "+a_+" "+_a+" "+a1+" "+a$);
}
}
-----------------------------------
Input Handling:
The process of reading set of characters from keyboard
1.java.lang.System.in
This Object represents input device 
2.java.util.Scanner

Scanner:
This class object reads flow of characters from keyboard

usage:
import java.util.Scanner;

create Scanner Object:
Scanner sc=new Scanner(System.in);

new operator:
it allocates the memory dynamically .

Methods:
int n=sc.nextInt();
float n=sc.nextFloat();
double n=sc.nextDouble();
long n=sc.nextLong();
String s=sc.next();  //one word
String s=sc.nexrLine();  //multiple words

//wap to read your name & print with  Hello : xxxxx
import static java.lang.System.*;
import java.util.Scanner;
class a{
public static void main(String... args){
Scanner sc=new Scanner(in);
out.print("Enter name : ");
String name=sc.nextLine();
System.out.println("Hello : "+name);
}
}
--------------
1.wap to read 2 integers and print their sum
2.wap to read 3 strings join together and display as concatination string.
----------------------
Operators:
1.Arithmatic Ops  +,-,*,/,%
2.Relational or comparision Ops  >, < ,>=,<=,==,!=
3.Logical Ops &&,||,!
4.Assignment Ops =,+=,-=,/=,
5.uniary Ops ++,--
6.Bitwise Ops &,|,^,~
7.Shift Ops  >>,<<
8.Terinary Ops  ? :

Arithmatic Ops:
wap to read length & breadth of rectangle print its area & perimeter.

import java.util.Scanner;
class a{
public static void main(String args[]){
Scanner sc=new Scanner(System.in);
System.out.print("Enter length : ");
int l=sc.nextInt();
System.out.print("Enter breadth : ");
int b=sc.nextInt();
int a=l*b;
int p=2*(l+b);
System.out.println("area of rect : "+a+"\nperi of rect : "+p);
}
}
-------------------------------
wap to read side of a square print its area & perimeter.
import java.util.Scanner;
class a{
public static void main(String args[]){
Scanner sc=new Scanner(System.in);
System.out.print("Enter side : ");
int s=sc.nextInt();
int a=s*s;
int p=4*s;
System.out.println("area of sqr : "+a+"\nperi of sqr : "+p);
}
}
---------------------------------------------------
wap to read radius of a circle, print its area & perimeter.
wap for PTR, and Compute SI
import java.util.Scanner;
class a{
public static void main(String args[]){
Scanner sc=new Scanner(System.in);
System.out.print("Enter pri amo : ");
int p=sc.nextInt();
System.out.print("Enter time : ");
int t=sc.nextInt();
System.out.print("Enter R of I : ");
int r=sc.nextInt();

int si=(p*t*r)/100;

System.out.println("SI Amount : "+si);
}
}
-------------------------------
Relational ops:
import java.util.Scanner;
class a{
public static void main(String args[]){
Scanner sc=new Scanner(System.in);
int a=5;
int b=2;
System.out.println(a>b);
System.out.println(a<b);
System.out.println(a<=b);
System.out.println(a>=b);
System.out.println(a==b);
System.out.println(a!=b);
}
}
-----------------------------
Assignment Ops:
=,+=,-=,/=
import java.util.Scanner;
class a{
public static void main(String args[]){
Scanner sc=new Scanner(System.in);
int a=2;
int b=3;
a+=b; //2+=3
System.out.println(a); //5
a*=b; //5*=3
System.out.println(a); //15
a-=b;//15-=3
System.out.println(a); //12
}
}
-----------------------------
uniary Ops ++,--
pre increment  ++a
post increment  a++
pre decrement   --a
post decrement   a--

import java.util.Scanner;
class a{
public static void main(String args[]){
Scanner sc=new Scanner(System.in);
int a=2,b=9,c=5,d=7;
//post increment
System.out.println(a++);
System.out.println(a);
//post decrement
System.out.println(b--);
System.out.println(b);
//pre increment
System.out.println(++c);
//pre decrement
System.out.println(--d);
}
}
-----------------
Logical Ops 
&& ->logical and,
|| ->logical or,
!  ->logical not or not

Not(!):
!True=False
!False=True

class a{
public static void main(String args[]){
int a=5,b=7;
System.out.println(!(a==b));
}
}
--------------------
logical and (&&) :
1-> true
0-> false
c1	c2	result
1	 1	  1
0	 1	  0
1	 0	  0
0 	 0	  0

class a{
public static void main(String args[]){
int a=2,b=3;
System.out.println((a!=b)&&(a<b));
}
}
----------------------
logical or (||) :
1-> true
0-> false
c1	c2	result
1	 1	  1
0	 1	  1
1	 0	  1
0 	 0	  0

class a{
public static void main(String args[]){
int a=2,b=3;
System.out.println((a==b)||(a<b));
}
}
-----------------------------
Bitwise Ops:
 &->Bitwise and,
 |->Bitwise or,
 ^->Bitwise Xor,
 ~->one complem... or tilde

^ :
a-b or b-a 
we can't consider -ve values.

~:
 -ve :+ve-1
 +ve :-ve-1

c=5
5:-5-1
 :-6

-9:9-1
  :8

2-0010
3-0011
--------
  0010 ->2  &
  0011 ->3  |
  0001 ->1  ^

class a{
public static void main(String args[]){
int a=2;//0010
int b=3;//0011
int c=5;
int d=-9;
System.out.println(a&b);
System.out.println(a|b);
System.out.println(a^b);
System.out.println(~c);
System.out.println(~d);


}
}
---------------------------
Shift Ops :
 >> -> right shift,
 << -> left shift

class a{
public static void main(String args[]){
int a=7;//0111
System.out.println(a<<1);
System.out.println(a<<2);
System.out.println(a>>1);
System.out.println(a>>2);


}
}
---------------------
Terinary Ops :
? :
syntax:
(cond)?True:False;

i need to found it big no.

class a{
public static void main(String args[]){
int a=30,b=8,big;
big=(a>b)?a:b;
System.out.println(big);
}
}

---------------------------
control statement:
there are two types of control statements:
1.condition
2.Iterative

Condition control statement:
1.If
2.switch case

If : it's widly used for control statement. It contain several forms

1.simple if: if else
2.block if: if
3.multi conditional : if else if ...
4.nested if : if ... if

simple if:
syntax:
if(condition)
{

 ......
}
else{
......
}

//wap to read two numbers and print biggest number:
class a{
public static void main(String args[]){
int a=88,b=133;
if(a>b){
System.out.println("a is Biggest no : "+a);
 }
else{
System.out.println("b is Biggest no : "+b);

 }
}
}

-----------------------
//wap to read a number and test for even or odd num .
//wap to read year and test leap year or not?
//wap a num and test it common multiple of 3 and 5 (use &&)

multi conditional and if control statement:
if else if

syntax:
if(condition1){
...
}
else if(cond2){
....
}
else if(cond3){
.....
}
..........
else if(cond N){
....
}
else{
.......
}
-----------
code 1 :
wap to read three numb and print biggest number.
class a{
public static void main(String args[]){
int a=188,b=133,c=212;
if(a>b){
System.out.println("a is Biggest no : "+a);
 }
else if(b>c){
System.out.println("b is Biggest no : "+b);
 }
else if(a>c){
System.out.println("a is Biggest no : "+a);
}
else{
System.out.println("c is Biggest no : "+c);
}
}
}
--------------
code 2:
class a{
public static void main(String args[]){
int a=188,b=133,c=212;
if(a>b && a>c){
System.out.println("a is Biggest no : "+a);
 }
else if(b>c){
System.out.println("b is Biggest no : "+b);
 }
else{
System.out.println("c is Biggest no : "+c);
}
}
}
--------------------------
student marks and assign/print grade based on marks range
91-100 - A
81-90 -B
71- 80 -c
other wise - P
--------------------
ascii values:
A=65  a=97  0=48
Z=90  z=122 9=57
----------------------
class a{
public static void main(String... args){
char c='B';
if(c>=65 && c<=90){
System.out.println("upper case "+c);
}
else if(c>=97 && c<=122){
System.out.println("lower case "+c);
}
else if(c>=48 && c<=57){
System.out.println("numeric "+c);
}
else{
System.out.println("Special chara " +c);
}
}
}
----------------------------------------
block if:
syntax:
if(condition){
statement;
}

class a{
public static void main(String... args){
int n=2;
if(n%3==0){
System.out.println("multiple with 3");
}
}
}
-------------------
nested if:
syntax:
if(condition outer){
if(cond inner){
  st;
}
else{
st;  
} //inner
}
else{
st;
}

code:
class a{
public static void main(String... args){
char n='8';
if((n>=65 && n<=90) || (n>=97 && n<=122))
{
  if(n>=65 && n<=90)
   {
     System.out.println("this is upper case");
    }
   else{
      System.out.println("this is lower case");
      }
}
else{
System.out.println("this is special chara");

}
}
}
-----------------------------------
looping or iterative:
for loop
while loop     //init ; cond; ++/--
do-while

for loop:
syntax:
for(init;cond;++/--){
st;
}

wap to print 1 to 10
class a{
public static void main(String... args){
for(int i=1;i<=10;i++){
System.out.print(i+" ");
}
}
}
-------------------
wap to print 10 to 1
class a{
public static void main(String... args){
for(int i=10;i>=1;i--){
System.out.print(i+" ");
}
}
}
---------------
wap to print A to Z
class a{
public static void main(String... args){
for(int i=65;i<=90;i++){
System.out.print((char)i+" ");
}
}
}
--------------------------------------------
wap to print Z to A
wap to print a to z
wap to print z to a
------------------------
while loop:
syntax:
init;
while(cond){
st;
++/--;
}
-------------------
wap to print 100 to 90
class a{
public static void main(String... args){
int i=100;
while(i>=90){
System.out.print(i+"  ");
i=i-1;
}
}
}
------------------
do-while:
syntax:
do{
st;
++/--;
}while(cond);

code: 
wap to print 15 to 50
class a{
public static void main(String... args){
int i=15;
do{
System.out.print(i+"  ");
i=i+1;
}while(i<=50);
}
}
----------
class a{
public static void main(String... args){
int i=65;
do{
System.out.print((char)i+" ");
i=i+1;
}while(i<=90);
}
}
------------------
control flow statements:
1.break
2.continue
3.switch case
4.System.exit(0)

1.break:
class a{
public static void main(String... args){
int i=65;
do{
System.out.println(i+" ");
i=i+1;
break;
}while(i<=90);
}
}
---------------
//wap to print 1 to 10 but i need to stop 7 number
class a{
public static void main(String... args){
int i=1;
while(i<=10){
if(i==7)
break;
System.out.print(i+" ");
i=i+1;
}
}
}
-------------------------
continue:
//wap to print 1 to 10 but i need to stop 7 number
class a{
public static void main(String... args){
for(int i=1;i<=10;i++){
if(i==5)
continue;
System.out.print(i+" ");
}
}
}
---------------
System.exit(0):
//wap to print 1 to 10 but i need to stop 7 number
class a{
public static void main(String... args){
System.out.println(11);
System.out.println(12);
System.out.println(13);
System.out.println(14);
System.exit(0);
System.out.println(15);
System.out.println(16);
System.out.println(17);
System.out.println(18);

}
}
--------------------------------
Switch case():
-------------
syntax:
switch case(vari)
{
case 1: st;
break;
case 2: st;
break;
case 3: st;
break;
case 4: st;
break;
..........
case N: st;
break;
default: st;
break;
}

code:
class a{
public static void main(String... args){
int i=5;
switch(i){
case 1: System.out.println("Java");
break;
case 2: System.out.println("Python");
break;
case 3: System.out.println("PHP");
break;
default:System.out.println("choose correct option 1 to 3");
break;
}
}
}
------------
nested for loop:
syntax:
for(init;cond;++/--) -> outerloop  rows
{
for(init;cond;++/--) -> innerloop   cols
{
st;
}
}
wap to print
11111
22222
33333
44444
55555

class a{
public static void main(String... args){
int i,j;                              
for(i=1;i<=5;i++)       
{                       
for(j=1;j<=5;j++) 
{
System.out.print(i);
}
System.out.print("\n");

}
}
}
----------
wap to print
12345
12345
12345
12345
12345
class a{
public static void main(String... args){
int i,j;                              
for(i=1;i<=5;i++)       
{                       
for(j=1;j<=5;j++) 
{
System.out.print(j);
}
System.out.print("\n");

}
}
}
------------------
wap to print 
111
222
333
444
555
class a{
public static void main(String... args){
int i,j;                              
for(i=1;i<=5;i++) 
{
for(j=1;j<=3;j++) 
{
System.out.print(i);
}
System.out.print("\n");

}
}
}
-------------------------------
*
**
***
****
*****

class a{
public static void main(String... args){
int i,j;                              
for(i=1;i<=5;i++) 
{
for(j=1;j<=i;j++) 
{
System.out.print('*');
}
System.out.print("\n");

}
}

-------------------------
*****
 ****
  ***
   **
    *
class a{
public static void main(String... args){
int i,j,n=5,k;                              
for(i=n;i>=1;i--) 
{
for(j=n-1;j>=i;j--) 
{
System.out.print(" ");
}
for(k=1;k<=i;k++)
{
System.out.print("*");
}
System.out.print("\n");

}
}
}
-------------------------
sum logic:
s=0
s=s+variable

s=s+i
s=0+1=1
s=1+2=3
s=3+3=6
s=6+4=10
s=10+5=15
-
code:
import java.util.Scanner;
class a{
public static void main(String... args){
Scanner sc=new Scanner(System.in);
System.out.print("enter no : ");
int n=sc.nextInt();
int i,s=0;                              
for(i=1;i<=n;i++) 
{
s=s+i;
}
System.out.println("sum of 1 to "+n+" is "+s);

}
}
----------------------
wap to print sum of even no and sum of odd no.
import java.util.Scanner;
class a{
public static void main(String... args){
Scanner sc=new Scanner(System.in);
System.out.print("enter no : ");
int n=sc.nextInt();
int i,en=0,on=0;                              
for(i=1;i<=n;i++) 
{
if(i%2==0){
   en=en+i;
  }
else{
   on=on+i;
 }
}
System.out.println("sum of even no is "+en);
System.out.println("sum of odd no is "+on);

}
}
------------------
count logic:
c=0
c=c+1

import java.util.Scanner;
class a{
public static void main(String... args){
Scanner sc=new Scanner(System.in);
System.out.print("enter no : ");
int n=sc.nextInt();
int i,c=0;                              
for(i=1;i<=n;i++) 
{
if(i%2==0){
   c=c+1;
}
}
System.out.println("count of even no is "+c);
}
}
------------------------------
factor logic:
5
----
1   5

5%1 ==0
5%2 ==1
5%3 ==2
5%4 ==1
5%5 ==0
wap to print fractor logic
class a{
public static void main(String... args){
int n=5;
for(int i=1;i<=n;i++){
if(n%i==0)
{
System.out.print(i+" ");
}
}
}
}
-----------------
wap to print fractor logic in count

class a{
public static void main(String... args){
int n=10,fc=0;
for(int i=1;i<=n;i++){
if(n%i==0)
{
fc=fc+1;
}
}

System.out.println("COUNT OF FACTOR NO is "+fc);

}
}

---------------------------
prime logic:

class a{
public static void main(String... args){
int n=13,fc=0;
for(int i=1;i<=n;i++){
if(n%i==0)
{
fc=fc+1;
}
}
if(fc==2){
System.out.println(n+" is a prime no ");
}
else{
System.out.println(n+" is non prime no ");
}
}
}
--------------------------------------
digit logic:
123
321

123%10=3   123/10  12
12%10=2     12/10  1
1%10=1       1/10  0
class a{
public static void main(String... args){
int n=985,d;
while(n>0){
d=n%10;
System.out.print(d);
n=n/10;
}
}
}
------------------------
factorial :
5!
1*2*3*4*5 
or 
5*4*3*2*1
code:
class a{
public static void main(String... args){
int n=10,fc=1;
for(int i=1;i<=n;i++){
fc=fc*i;
}
System.out.print(n+" factorial is "+fc);

}
}
---------------------
perfect no:
class a{
public static void main(String... args){
int n=6,s=0,i;
for(i=1;i<n;i++){
if(n%i==0)   
{
  s=s+i;
}
}
if(n==s){
System.out.print(n+" is perfect no");
}
else{
System.out.print(n+" is not perfect no");
}
}
}
-----------------------
armstrong no:
153 = 1^3+5^3+ 3^3 
    =1 + 125 + 27
    =153
class a {
public static void main(String[] args) {
int n = 153,temp = n,s = 0,d;
while (n > 0) {
d = n % 10;  
s += Math.pow(d, 3);  
n /= 10;    
}
if (temp == s) {
System.out.print(temp + " is an Armstrong number");
} 
else {
System.out.print(temp + " is not an Armstrong number");
}
}
}
---------
code 2:
class a {
public static void main(String[] args) {
String n="mom",r="";
int l=n.length();
for(int i=l-1;i>=0;i--)
r=r+n.charAt(i);
if(n.equals(r)){
System.out.println("palindrome number");
}
else{
System.out.println("not palindrome number");
}
}
}

---------------------
Exception Handling:
It is known as runtime error generated by successful application 

Error Overview:
by developing applicatin there are 2 types of errors get generated 
1.Compile time error or compiler error
2.run time errors

Compile errors:
All syntax errors
ex:
->;,",',.,} missing
->using of undeclared variables
->usage of mismatched reserved words
->usage of invalid program structure etc...

Run time errors:
It is an error generated by successfull program at client environment with lack of resources.
->Non Existing files
->No RAM,printer,modem,etc.....
->Invalid links.
ex: divide by zero

Note:
runtime error cause abrupt termination

Need of exception handling:-
to avoid abrupt termination exception tobe handled.

Implemetation Requirements:
->try block
->catch block     

Syntax of try & catch:
try{
...
}
catch()
{
....
}
-------
Feature: (try)
->Try is an excutable block
->It should be followed by catch block.
->try throws out genetated error

(catch)
->This knowns are error handler block
->It executes on error occurance only 

code:
class a {
public static void main(String[] args) {
try{
int a=10;
int b=0;
System.out.println(a/b);
}
catch(Exception e){
System.out.println("cann't divided by zero ");
}
}
}
-----------------
Exceptions:
->java.xxxxxx.xxxxException
       some primary name
->java uses a class for every exception

Exception Name 					cause
1.java.lang.ArithmaticException 		divided by '0'
2.java.lang.NumberFormatException   	unable to convert 					string to number
3.java.util.InputMismatchException	Entering string instead 						of integer
4.java.lang.ArrayIndexOutOfBoundsException   on using unused 						index
5.java.lang.StringIndexOutOfBoundsException  on using unused 						index
-------------------
one try with one catch block:
wap to read your marks print the same by handling exception

import java.util.*;
class a {
public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
try{
System.out.print("enter marks: ");
int marks=sc.nextInt();
System.out.println(marks);
}
catch(InputMismatchException im){
System.out.println("invalid number");
}
}
}
-------------------------------------
one try with multiple catch block:
This is prefer when there is a chance of getting more than one exception

syntax:
try{
....
}
catch()
{
........
}
catch(){
......
}
-----------------

import java.util.*;
class a {
public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
try{
System.out.print("enter no: ");
int a=sc.nextInt();
System.out.print("enter no: ");
int b=sc.nextInt();
System.out.println(a/b);
}
catch(ArithmeticException e){
System.out.println("cann't divided by '0' ");
}
catch(InputMismatchException im){
System.out.println("invalid number");
}
}
}
-----------
Error handlers:
The statements those defining catch block error handlers
They are two types
1.user defined
2.pre defined

1.user defined:
This doesn't contain error debug machanism
ex:
catch(filenotfoundException fe){
S.O.p("no such file")
}
---------
2.pre define error handlers:
This is for developer sake that contains error debug machanism

usage:
catch(ArithmeticException ae)
{
s.o.p(ae.getMessage()); -> only message
}

wap to read your name,position and print position character
import java.util.*;
class a {
public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
try{
System.out.print("enter String: ");
String st=sc.next();
System.out.print("enter position: ");
int p=sc.nextInt();
System.out.println(st.charAt(p));
}
catch(StringIndexOutOfBoundsException e){
e.printStackTrace();
}
catch(InputMismatchException im){
System.out.println(im.getMessage());
}
}
}
-------------------
Types of Catch blocks:
There are two types of catch block
1.Known
2.default
Known:
The catch block that can handle only one type of exception 

Default:
The catch block that handles all types of exception and it replaces the usage of no of known catch blocks

syntax:
catch(Exception ex)
{
....
}

java.lang.Exception:
It acts as a parent class for all known Exception.
-------
Multiple try(s) with multiple catch(s):
->This is preferred in a huge application that contain
->Many logics few may raise exceptions and few may not raise exceptions.


usage: 
logic 1
try{
.....
}
catch(exception ex){
s.o.p("cannt divided by zero")
}

logic 2
s.o.p("hello");

logic 3
try{
.....
}
catch(){
.....
}
------------------------
Pre defined exception:
Checked exception
Unchecked exception

Checked Exception :
This is an exception provided with built-in hand machanism.
ex:java.lang.ArithmeticException

UnChecked :
This is exception compulsorly to be handled by developer .

Handling of unchecked exception:
1.try,catch
2.throws(clause)

It's a clause used to offer handling machanism to unchecked exception.

syntax:
psvm() throws IOException
{
.....
}

3.Finally
It's a special block that execute always with error or without error.It should be defined after catch block

Usage:
try{
....
}
catch(){
.....
}    
finally{
.....
}
-------------------
String Handling: 
String is a collection of text indentified in the form of words or sentences

Manipulations on the string:
class a {
public static void main(String[] args) {
String st1="java";
String st2="SERVER";
System.out.println(st1.toUpperCase());
System.out.println(st2.toLowerCase());
System.out.println(st1.length());

}
}
---------------------
String Manipulation with operators:
+ -> concatination sake
   st3=st1+st2
= -> To assign the String
   st1=st2
== -> compare two strings for equality if the values are static. It can't compare

String comparision:
st1.equals(st2) t,f -> It consider the case
st2.equalsIgnoreCase(st2)

ex:
wap to read two strings and compare them for equality.
import java.util.Scanner;
class a {
public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
System.out.print("Enter two String : ");
String st1,st2;
st1=sc.next();
st2=sc.next();
if(st1.equals(st2)==true){
System.out.println("same");
}
else{
System.out.println("different");

}
}
}
-----------------------------------------
st1.compareto(st2):
==  0
>   0
<   0
st1==st2
st1>st2
st2>st1

This method compare both the string and returns as 0,>0,<0

#wap to read two strings and print biggest string.
import java.util.Scanner;

class a {
public static void main(String args[]) {
Scanner sc = new Scanner(System.in);
System.out.print("Enter two strings: ");
String st1, st2;
st1 = sc.next();
st2 = sc.next();
if (st1.compareTo(st2) > 0) {
 System.out.println(st1 + " comes first.");
 } 
else if (st1.compareTo(st2) < 0) {
System.out.println(st2 + " comes first .");
}
else if(st1.compareTo(st2)==0){
System.out.println("Both strings are the same.");
} 
else {
System.out.println("invalid.");
        }
    }
}
--------------------------
partial string comparision:
1.st.endsWith(par);
2.st.stratsWith(par);
3.st.indexOf(par);

It returns its position is found 0 otherwise -1

wap to read emailid  print as valid id is it ends with com and it must contain @ character.
import java.util.Scanner;

class a {
public static void main(String args[]) {
Scanner sc = new Scanner(System.in);
System.out.print("Enter emailid : ");
String st1;
st1 = sc.next();
if(st1.endsWith(".com")) {
 System.out.println(" valid");
 }  
else {
System.out.println("invalid.");
        }
    }
}
----------------------------
startsWith:
import java.util.Scanner;

class a {
public static void main(String args[]) {
Scanner sc = new Scanner(System.in);
System.out.print("Enter vech no : ");
String st1;
st1 = sc.next();
if(st1.startsWith("AP16")) {
 System.out.println("valid");
 }  
else {
System.out.println("invalid.");
        }
    }
}
----------------
indexOf:
import java.util.Scanner;

class a {
public static void main(String args[]) {
Scanner sc = new Scanner(System.in);
System.out.print("Enter vech no : ");
String st1;
st1 = sc.next();
System.out.println(st1.indexOf('a'));
}
}
------------------------------
Partial String/sub string:
st.charAt(i);
it returns the character at given index.
st.SubString(p1,p2);
It returns,partial string between p1 & p2 by excluding p2
ex:
st="wlecome";
st.charAt(0);
st.SubString(0,3);

wap to print one by one character of your name
import java.util.Scanner;
class a{
public static void main(String... args){
Scanner sc=new Scanner(System.in);
System.out.print("Enter name : ");
String name=sc.next();
for(int i=0;i<name.length();i++)
System.out.println(name.charAt(i) +" -> "+i);
System.out.print(name.substring(3,5));
}
}
-----------------------------
string replace:
st.replace(old,new)

code:

import java.util.Scanner;
class a{
public static void main(String... args){
Scanner sc=new Scanner(System.in);
System.out.print("Enter name : ");
String name=sc.next();
System.out.print(name.replace("j","bl"));
}
}
---------------------
string tokenisation:

The processs of splitting a string into small pieces(tokens) with any characters as superator.
ex:
String st="world wide web"
String words[]=st.split(" ");
System.out.println(words.length);

code:
import java.util.Scanner;
class a{
public static void main(String... args){
String st="127/0/0/1";
String words[]=st.split("/");
System.out.println(st);
System.out.println(words.length);}
}
--------------------
String reverse:
java.lang.StringBuffer/Builder:
this object represent varied String.

input:abc
output:cba

input:nitish
output:hsitin

code :
import java.util.Scanner;
class a{
public static void main(String... args){
Scanner sc =new Scanner(System.in);
System.out.print("enter string : " );
String st=sc.next();
String re="";
System.out.println("original string : " + st);
for(int i=0;i<st.length();i++){
char ch=st.charAt(i);
 re=ch+re;
}
System.out.println("Reversed string: "+re);

}
}
-------------------
Manipulations of string buffer:
1.append()
2.delete()
3.insert()
4.reverse()

code:
class a{
public static void main(String... args){
StringBuffer sb1=new StringBuffer("web");
System.out.println(sb1);
sb1.append(" server");
System.out.println(sb1);
sb1.insert(3," logic");
System.out.println(sb1);
sb1.delete(0,3);
System.out.println(sb1);
sb1.reverse();
System.out.println(sb1);
}
}
--------------
Math Logic:
java.lang.math:
   ->This class contains several mathematical methods.

code :
class a{
public static void main(String... args){
System.out.println(Math.PI);
System.out.println(Math.E);
System.out.println(Math.sqrt(25));
System.out.println(Math.abs(-11));
System.out.println(Math.abs(99));
System.out.println(Math.pow(2,3));
System.out.println(Math.sin(90));
System.out.println(Math.sinh(90));
System.out.println(Math.log(2));
System.out.println(Math.exp(1));
System.out.println(Math.asin(90));
System.out.println(Math.toDegrees(0.017));//rad val
System.out.println(Math.toRadians(1)); //deg val

}
}
--------------------
Date Logic:
java.util.Date():
->this class object  represent current date and time.

usage:
import java.util.Date;
create object:
Date dt=new Date(); //current date and time

code :
wap to print current date and time.
import java.util.Date;
class a{
public static void main(String... args){
Date dt=new Date();
System.out.println(dt.toString());

}
}
------
Get attributes of the Date:
dt.getDate()->dd(1-31)
dt.getMonth() ->mm(0-11)
dt.getYear() ->YYYY
dt.getHours() ->0-23 -HH
dt.getMinutes() ->(0-59) mi
dt.getSeconds() ->(0-59) ss

code:
import java.util.Date;
class a{
public static void main(String... args){
Date dt=new Date();
int hours=dt.getHours();
if(hours>=9 && hours<=17)
{
System.out.println("login succes");
}
else{
System.out.println("login fail");

}
}
}
-----------
Formatting Date content:
java.text.SimpleDateFormat;
->this class object converts javas date to any required date format

ex:
wap to print current Date in oracles dat formate
import java.util.Date;
import java.text.SimpleDateFormat;
class a{
public static void main(String... args){
Date dt=new Date();
SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/YYYY");
System.out.println(sdf.format(dt));
}
}
------------
OOPs:
Object Oriented Programming:-

Programming:
1.Functional -> c 
2.OOPs -> c++,java,c#.net,python

- small taks,simula 97, ada ->Java Overcomes the drawbacks in the programming language

-vc++ (oops,GUI)
-java (oops,web,gui)
-c#.net 
-python 

Overview of oops:
->Three features are known as oops concepts
1.Encapsulation  -class,objects
2.Polymorphism   - overloading,overriding
3.Inheritance    - single,multi.....

Encapsulation:
The process of hiding and belongingness of the data to object level.

Implementation Requirements:
1.class
2.object

Class (Data abstraction):
a class is a collection of data members and methods

ex:
class a{
int z; //data members
void a() //data methods
{
st;
}
}
--------
class is an abstract (whose object is to be created)

Types of classes:
simple class
static class
super class
sub class
abstract class
final class

how to define class:
class xxxxxx
{
//data members

//data methods
}

Define a class for sqr pattern
class sqr
{
int s=90;
void area(){
System.out.println(s*s);
}
}
---------
Object:
It is an instance of the class
classname obj1,obj2;

creation of the objects:
1. 2step construction:
 ->declare obj
    sqr s1;
 ->allocate memory 
    s1=new sqr();  //dynamic obj instance

2. 1step construction:
  sqr s1= new sqr();
 
Access the members of objects
with . (belonging operator)

Define a class for circle pattern with necessary attributes and logic
class cricle
{
int r=6;
void area(){
System.out.println(3.14*r*r);
}
}
class a{
public static void main(String... args){
cricle c1=new cricle();
c1.area();
}
}
--------------------------
Scope modifier/Data Hiding:
Every member of the class should be defined with access scope modifier

Types of scope modifiers:
private
default
public
protected

1.private:
It is  accessible in self class is will not be accessable at out side of the class.

2.Default:
It's a default scope modifier
No such  reserved word.
It is accessible to
->self class
->sub class
->other class   of same path or package

3.protected:
It is accesible to same packaged classes,sub classes of other packages

4.public:
It is accesible to any where that is same packaged classes & other packaged classes.

Data Hiding:
The process of hiding data members and accessing these data members with public method.

Declare private data members:
private int id;

Manipulate with Setter and Getter methods:
Setter: 
This is to assign value to private data member of a class.

Getter:
This is to get the value from private data memeber of a class.

ex:
class product
{
private int pid;
private String pname;
public void setpid(int pid)
{
this.pid =pid;
}
public void setpname(String pname){
this.pname=pname;
}
int getpid()
{
return pid;
}
String getpname(){
return pname;
}
}
class a{
public static void main(String[] args)
{
product p1=new product();
product p2=new product();
p1.setpid(1212);
p1.setpname("mobile");
p2.setpid(1213);
p2.setpname("TV");
System.out.println("Product ID \t Product Name " );
System.out.println( p1.getpid()+"\t\t\t" + p1.getpname());
System.out.println( p2.getpid()+ "\t\t\t" + p2.getpname());
}
}
-----------------------
logic methods:
This methods includes business logic
1.Math/computational
2.Validation
3.Business logic
4.db logic
5.file logic
 ..... etc.

Define a class for a logic task with id,pwd as datamembers and a validation method 
id-> System, pwd -> manager

class login
{
private String id,pwd;

public void setId(String id)
{
this.id=id;
}
void setpwd(String pwd){
this.pwd=pwd;
}
void validate(){
if(id.equals("System") && pwd.equals("manager")){
System.out.println("success");
}
else{
System.out.println("unsuccess");
}
}
}
class a{
public static void main(String[] args){
login l=new login();
l.setId("System");
l.setpwd("manager");
l.validate();
}
}
--------------
Wap to define a class for simple interset computation.

Constructers:
It's a member function, that executes when an object is created.

Need of constructer:
This is to perform first time/ default/ initialization task.

Definition rules of the constructor:
->class name & constructer name should be same
->It never return value.
->It can be overloaded(more than one constructer is allowed.)
->It never be called with notation.
->It gets executed at the time of object creation.

Types of constructer:
1.Default constructer
2.Parametrized constructer
3.Copy constructer

1.Default constructure:
It's a constructer member function without arguments.
Used to initialize an object with default properties.
ex:
class rect{
private int l,b;
rect()
{
l=10;
b=20;
}
}

call default constructer
rect r1=new rect();

2.Parameterized constructor:
It's a constructer member function defined with arguments/parameters.
->used to initialize an object with client preferences(parameter)

3.Copy constructer:
It's a constructer member function defined with self class object as argument
Used to copy new object with existing object properties.

Define a class with 3 forms of constructers.
class Button
{
private int width,height;

//default constructer
Button(){
this.width=100;
this.height=20;
}

//parameterized constructer
Button(int w,int h)
{
this.width=w;
this.height=h;
}

Button(Button obj)
{
this.width=obj.width;
this.height=obj.height;
}
void showsize()
{
System.out.println(width+" , "+height);
}
}
class a{
public static void main(String[] args){
Button b1=new Button();
Button b2=new Button(20,40);
Button b3=new Button(b2);
b1.showsize();
b2.showsize();
b3.showsize();
}
}
-------------------------
Notes:
Java System maintain an implicit default constructer in a class in which no explicit constructer definition.
---------------------------
Finalizer:
It's a member function that executes when an object is destroyed.

Need:
To perform finalyzation task.
ex:
1.closing files
2.resource releasing
3.disconnection.
Java doen't support explitit finalyzer.

java.lang.object:
It acts as an invisible super class for all java's classes.

Nested class:
A class inside of another class
One class is known as outer class and
Other class is known as inner class.

Usage:
class class_name <- outer 
{
---------
------------
-----------
class class_name   <- inner
{

}
}
----------------
Features of Nested class:
1.outer class members are refered into inner class
2.outer class can refer inner class  members in the form of object only.
3.client application can create outer class object and it cann't create inner class object
4.Inner classes are also known as Hidden class.

container class:
The class that contains object as data members of other class.
eg:
class Book
{
.....
}
class member
{
.....
}
class issuses //container
{
Book b1=new Book();
member m1 = new member();
.......
}
-----------------------
Functional Modifier:
This modifer represents belongingness.
The member of the class are defined with functional modifier.
There are 2 types of functional modifier:
1.Static
2.Non-Static

code:
class a{
static int b=10;
int c=77;
public static void main(String[] args){
a r=new a();
int z=5;
System.out.println(z);
System.out.println(b);
System.out.println(r.c);

}
}
--------
Static:
It's a class belonging modifier that doesn't require object.

Non-Static:
It's a default modifier No such reserved word
It represent object belonging

eg:
class z
{
void fun1() // non static
{
System.out.println("obj call");
}
static void fun2() //static
{
System.out.println("class call");
}
}
class a{
public static void main(String[] args){

z.fun2();
new z().fun1(); 
}
}
-----------
collections:
arrays:Arrary is a collection of elements

Single Dimensional Arrays:
int a=5,b=10,c=20,...........

dt array_name[]={e1,e2,e3,.......}-> array
[]->size
ex:
class a{
public static void main(String[] args){
int z[]={99,88,77,1,4,7,44};
System.out.println(z[1]);
System.out.println(z[7-3]);
}
}
-----------
Two Dimensional Arrays:


polymorphism:
2

Inheritance:
5

super keyword:
final modifier:
final method:
final class

Interfaces:

abstract class:

multithreading

extends



--------------------
Streams and File I/O :
the classes object output stream and object input streams to read and write class objects with binary files.

I/O=input/output
In this context it is input and output from program
Input can be from keyboard or a file
Output can be to display (screen) or a file
Advantages of file I/O:
  permanent copy
  output from one program can be input to another
  input can be automated(rather than entered manually)

Stream an object that either delivers data to its destination(screen,files,etc)
or that takes data from a source (keyboard,file,etc.)

->It acts as a buffer between the data source and destination .

Input Stream: a stream that provides input to a program.
->System in is an input Stream

Output Stream: a stream that accepts output from a program.
->System out is an output Stream.

A stream connects a program to an I/O object:
System out connects is a program to the screen.
System in connects is a program to the keyboard






















